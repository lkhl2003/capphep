<?php

/**
 * @file
 * Render an administrative menu as a dropdown menu at the top of the window.
 */

/**
 * Implements hook_menu().
 */
use PhpOffice\PhpWord;
use Dompdf\Dompdf;
use PhpOffice\PhpWord\Autoloader;
use PhpOffice\PhpWord\Settings;
use DocxMerge\DocxMerge;

function d7dev_menu() {

    $items['d7dev'] = array(
        'title' => 'D7Dev',
        'description' => 'Administration tools.',
        'page callback' => 'd7dev_test',
        'access arguments' => array('access administration pages'),
    );

    $items['d7dev merge docx'] = array(
        'title' => 'D7Dev Merge Docx',
        'description' => 'Administration tools.',
        'page callback' => 'd7dev_mergedocx',
        'access arguments' => array('access administration pages'),
    );

    return $items;
}

function d7dev_mergedocx() {
    $path = drupal_get_path('module', 'd7dev');

    require_once libraries_get_path('DocxMerge') . '/src/DocxMerge.php';
    require_once libraries_get_path('DocxMerge') . '/src/DocxMerge/Docx.php';
    require_once libraries_get_path('DocxMerge') . '/src/DocxMerge/Prettify.php';

    $dm = new DocxMerge();

    $num = 3;
    $doc_files = array();
    $pdf_files = array();
//Sinh ra $num file docx
    for ($i = 1; $i <= $num; $i++) {
        $hovaten = 'Ho va ten: Thi sinh ' . $i;
        $diem = 'Diem: Diem ' . $i;

        $result = "/MergeDocx/result" . $i . ".docx";

        $dm = new DocxMerge();
        $dm->setValues(
                $path . "/MergeDocx/Template_Huyen.docx", $path . $result, array(
            "HOVATEN" => $hovaten,
            "DIEM" => $diem,
                )
        );

        $doc_files[] = $path . "/MergeDocx/result" . $i . ".docx";
        $pdf_files[] = $path . "/MergeDocx/result" . $i . ".pdf";
    }

//Sinh $num file pdf
    for ($i = 0; $i < $num; $i++) {
        $doc_file = $doc_files[$i];
        $pdf_file = $pdf_files[$i];
        convert_docx_to_pdf($doc_file, $pdf_file);
    }


    $mergepdf_path = libraries_get_path('PDFMerger');
    require_once $mergepdf_path . '/PDFMerger.php';
    $pdf = new PDFMerger; // or use $pdf = new \PDFMerger; for Laravel

    for ($i = 0; $i < $num; $i++) {

        $pdf->addPDF($pdf_files[$i], 'all');
    }
    $pdf->merge('download', $path . '/MergeDocx/test.pdf'); // force download

    return "Merge OK!";
}

function convert_docx_to_pdf($wordfile, $pdffile) {

    $wordPath = libraries_get_path('PHPWord');
    $pdfPath = libraries_get_path('dompdf');

    require_once realpath($wordPath . '/src/PhpWord/Autoloader.php');
    require_once realpath($wordPath . '/src/PhpWord/Settings.php');
    require_once $pdfPath . '/autoload.inc.php';

    \PhpOffice\PhpWord\Settings::loadConfig();
    \PhpOffice\PhpWord\Autoloader::register();

    \PhpOffice\PhpWord\Settings::setPdfRendererPath($pdfPath);
    \PhpOffice\PhpWord\Settings::setPdfRendererName('DomPDF');

 \PhpOffice\PhpWord\Settings::setDefaultFontName('Dejavu Sans');
//Load temp file
    $phpWord = \PhpOffice\PhpWord\IOFactory::load($wordfile);
    $phpWord->setDefaultFontName('Dejavu Sans');

    $xmlWriter = \PhpOffice\PhpWord\IOFactory::createWriter($phpWord, 'PDF');
    $xmlWriter->save($pdffile);
}

function testMergedocx() {

    $path = drupal_get_path('module', 'd7dev');

    $libpath = libraries_get_path('PHPWord');

    require_once $libpath . '/src/PhpWord/Autoloader.php';
    \PhpOffice\PhpWord\Autoloader::register();

    $phpWord = new \PhpOffice\PhpWord\PhpWord();

    $section = $phpWord->addSection();
    $section->addText(htmlspecialchars("\${CLONEME}"));
    $section->addText(htmlspecialchars('Noi dung file template here:'));
    $section->addTextBreak();
    $section->addText(htmlspecialchars('Text break with defined font style:'));
    $section->addPageBreak();
    $section->addText(htmlspecialchars("\${/CLONEME}"));
    $phpWord->save($path . '/results/Huyen_template.docx');

    $templateProcessor = new \PhpOffice\PhpWord\TemplateProcessor($path . '/results/Huyen_template.docx');
// Will clone everything between ${tag} and ${/tag}, the number of times. By default, 1.
    $templateProcessor->cloneBlock('CLONEME', 5);

    $templateProcessor->saveAs($path . '/results/Huyen_Result.docx');
}

function d7dev_test() {
    testMergedocx();
    return 'OK';
//==================================
    $path = drupal_get_path('module', 'd7dev');

    $fullpath = $path . '/template.docx';
    require_once 'Template.php';
    $template = new Template();

    $template->open($fullpath)
            ->replace('client_full_name', 'Client Name')
            ->replace('client_email_address', 'Email')
            ->replace('client_mobile_number', 'Phone')
            ->replace('client_website', 'Website')
            ->replace('date_today', 'Date')
// save docx document
            ->save($path . '/test.docx');

    require_once libraries_get_path('DocxMerge') . '/src/DocxMerge.php';
    $dm = new DocxMerge();
    $dm->merge(array($fullpath, $path . '/test.docx'), $path . '/result.docx');

//  d7dev_readdocx($fullpath);
    return 'OK';
}

function d7dev_readdocx($filepath) {
    $wordPath = libraries_get_path('PHPWord');
    $pdfPath = libraries_get_path('dompdf');

    require_once realpath($wordPath . '/src/PhpWord/Autoloader.php');
    require_once realpath($wordPath . '/src/PhpWord/Settings.php');
    require_once $pdfPath . '/autoload.inc.php';

    \PhpOffice\PhpWord\Settings::loadConfig();
    \PhpOffice\PhpWord\Autoloader::register();

    \PhpOffice\PhpWord\Settings::setPdfRendererPath($pdfPath);
    \PhpOffice\PhpWord\Settings::setPdfRendererName('DomPDF');

    \PhpOffice\PhpWord\Settings::setDefaultFontName('Dejavu Sans');

//Load temp file
    $phpWord = \PhpOffice\PhpWord\IOFactory::load($filepath);
    $phpWord->setDefaultFontName('Dejavu Sans');

    $path = drupal_get_path('module', 'd7dev');

//Save it
    $xmlWriter = \PhpOffice\PhpWord\IOFactory::createWriter($phpWord, 'PDF');
    $xmlWriter->save($path . '/result2.pdf');
}
